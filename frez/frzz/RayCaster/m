/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   build_wall.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bouhammo <bouhammo@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/12/24 17:34:00 by bouhammo          #+#    #+#             */
/*   Updated: 2025/01/05 21:47:51 by bouhammo         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../cub.h"

void    print_walls(t_start *var)
{
    int i = 0;
    while (i < var->len_map)
    {
        printf("wall[%d]  x [%f]  y [%f]  distance [%f] \n", i, var->wall[i].pos_x, var->wall[i].pos_y, var->wall[i].distance);
        i++;
    }

}

void    draw_floor_ceiling(t_start *var)
{
    int i = 0;
    while (i < var->move->height_y /2)
    {
        int j = 0;
        while (j < var->move->width_x)
        {
            ft_put_pixel_color(var, j, i ,0x8B4513FF );
            j++;
        }
        i++;
    }
    i = var->move->height_y /2;
    while (i < var->move->height_y)
    {
        int j = 0;
        while (j < var->move->width_x)
        {
            ft_put_pixel_color(var, j, i , 0x808080FF );
            j++;
        }
        i++;
    }
    return ;
}

double     get_bottom_p( t_start *var , double line)
{
    double get_b_pxl ;
    get_b_pxl = (var->move->height_y / 2) + (line / 2);

    if(get_b_pxl > var->move->height_y)
        get_b_pxl = var->move->height_y;
        
    return get_b_pxl;
}
double     get_top_p( t_start *var , double line)
{
    double get_tp_pxl ;

    get_tp_pxl = (var->move->height_y / 2) - (line / 2);
    if(get_tp_pxl > var->move->height_y)
        get_tp_pxl = var->move->height_y;
    return get_tp_pxl ;
}


void    build_walls(t_start *var , int ray) 
{
    double distance;
    double dis_projection_plan;
    double line;
    double get_top;
    double get_bottom;
    double top_pxl;

    distance = (var->wall[ray].distance ) * cos(var->wall[ray].angle - var->draw->angle);
    dis_projection_plan = ((var->move->width_x / 2) * (tan(deg_to_rad(rad_to_deg(FOV_ANGLE) / 2))));
    line = (TILE_SIZE / distance) * dis_projection_plan;
    get_top = line ;
    get_bottom =  get_bottom_p(var, get_top) ;
    top_pxl = get_top_p(var, get_top);
    while (top_pxl < get_bottom)
    {
        ft_put_pixel_color(var, ray, top_pxl ,0x00BFFFFF ) ;//0x00FF00FF );
        top_pxl++;
    }
}


void        check_distance(t_start *var,double  len_a,double len_b , int ray)
{
    // if (len_a == INT_MIN )
    //     len_a = 9999;
    // if( len_b == INT_MIN)
    //     len_b = 9999;

    if (len_a < len_b)
    {
        // drawing_line(var, var->move->coor_x, var->move->coor_y, var->ray->x_inter_horizontal , var->ray->y_inter_horizontal);
        var->wall[ray].pos_x = var->ray->x_inter_horizontal;
        var->wall[ray].pos_y = var->ray->y_inter_horizontal;
        var->wall[ray].distance = len_a ;
        var->wall[ray].angle = var->ray->ray_angle;
    }
    else
    {
        // drawing_line(var, var->move->coor_x, var->move->coor_y, var->ray->x_inter_vertical , var->ray->y_inter_vaertical);
        var->wall[ray].pos_x = var->ray->x_inter_vertical;
        var->wall[ray].pos_y = var->ray->y_inter_vaertical;
        var->wall[ray].distance = len_b;
        var->wall[ray].angle = var->ray->ray_angle;
    }
}

void ft_intersection(t_start *var)
{
    int ray;
    double len_a;
    double len_b;

    draw_floor_ceiling(var);
    var->ray->ray_angle = var->draw->angle  -  deg_to_rad(rad_to_deg(FOV_ANGLE) / 2);
    var->ray->ray_angle = normalize_angle(var->ray->ray_angle);
    ray =0;
    while (ray <= var->len_map)
    {
        git_first_x_intersection(var);
        git_first_y_intersection(var);
        len_a = sqrt(pow(var->ray->x_inter_horizontal - var->move->coor_x , 2) + pow(var->ray->y_inter_horizontal - var->move->coor_y , 2));
        len_b = sqrt(pow(var->ray->x_inter_vertical - var->move->coor_x , 2) + pow(var->ray->y_inter_vaertical - var->move->coor_y , 2));
        check_distance(var, len_a, len_b, ray);
        var->ray->ray_angle += deg_to_rad(rad_to_deg(FOV_ANGLE) / var->len_map);
        build_walls(var , ray);
        var->ray->ray_angle = normalize_angle(var->ray->ray_angle);
        ray++;
    }
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   draw_map.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bouhammo <bouhammo@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 15:40:33 by bouhammo          #+#    #+#             */
/*   Updated: 2024/12/24 20:19:41 by bouhammo         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../cub.h"

void		ft_error()
{
	printf("Error :\n");
	exit(EXIT_FAILURE);
}

int 	ft_caracter(char  Y)
{
	if( Y == 'N' ||  Y == 'S' || Y == 'W'  || Y == 'E' )
		return 1;
	return 0;
}

void	print_in_wall(t_start *var , int x_map,int y_map)
{
	int k = y_map;
	while (k < y_map + TILE_SIZE )
	{
		int len = x_map;
		while (len < x_map + TILE_SIZE  )
		{
			mlx_put_pixel(var->img, len , k, 0x000004FF );
			len++;
		}
		k++;
	}
}

void	print_in_space(t_start *var, int   x_map, int  y_map)
{
	int k = y_map;
	while (k < y_map + TILE_SIZE )
	{
		int len = x_map ;
		while (len < x_map + TILE_SIZE  )
		{
			mlx_put_pixel(var->img, len , k,  0x6A5AF);
			len++;
		}
		k++;
	}
}

void	print_pixel( t_start  *var)
{
	t_start *tmp;
	int i;
	int y_map;
	int j;
	int x_map;

	tmp = var;
	if (!tmp || !tmp->map)
		ft_error();
	tmp->img = mlx_new_image(tmp->mlx,tmp->move->width_x  , tmp->move->height_y );
	if(!tmp->img || (mlx_image_to_window(tmp->mlx, tmp->img ,0 ,0) < 0))
		ft_error();
	i=0;
	y_map =0;
	while (tmp->map[i])
	{
		x_map =0; 
		j = 0;
		while (tmp->map[i][j])
		{
			if(tmp->map[i][j] == '1' )
				print_in_wall(tmp,  x_map, y_map);
			if(tmp->map[i][j] == '0' || ft_caracter(tmp->map[i][j]) == 1)
				print_in_space(tmp,  x_map, y_map);
			x_map +=TILE_SIZE;
			j++;
		}
		y_map +=TILE_SIZE;
		i++;
	}
}

void print_pixel_player(t_start *var)
{
    if (!var || !var->img || !var->map)
        return;

    int x_map = var->move->coor_x;
    int y_map = var->move->coor_y;

	int y = y_map;
	while (y  < y_map + var->offset)
	{
		int x = x_map;
		while (x < x_map + var->offset - 2)
		{
			mlx_put_pixel(var->img, x, y , 0xFFFF00FF); 
			x++;
		}
		y++;
	}
}

void	ft_game_is_over(t_start *var)
{

	if (!var || !var->content)
		ft_error();
	print_pixel(var);
	print_pixel_player(var );
	ft_intersection(var);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_func_maths.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bouhammo <bouhammo@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/20 21:50:39 by bouhammo          #+#    #+#             */
/*   Updated: 2024/12/24 16:42:13 by bouhammo         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../cub.h"


double normalize_angle(double angle)
{
    angle = fmod(angle, 2 * M_PI);
    if (angle <= 0)
        angle = 2 * M_PI + angle;
    return angle;
}

double	deg_to_rad(double deg)
{
	double angle;

	angle = deg  * (M_PI / 180.0);
	return (angle);
}

double	rad_to_deg(double red)
{
	return (red * (180.0 / M_PI));
}

bool  is_looking_down(double angle)
{
	if(angle > 0 && angle < M_PI)
		return true;
	return false;
}

bool  is_looking_up (double angle)
{
	if(is_looking_down(angle) == false)
		return true;
	return false;
}

bool is_looking_right(double angle)
{
	if(angle  < (0.5 * M_PI) || angle > (1.5 * M_PI))
		return true;
	return false;
}

bool is_looking_left(double angle)
{
	if(is_looking_right(angle) == false)
		return true;
	return false;
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_intersection.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bouhammo <bouhammo@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/24 21:58:25 by bouhammo          #+#    #+#             */
/*   Updated: 2025/01/05 21:47:57 by bouhammo         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include  "../cub.h"

void drawing_line(t_start *var , int x0, int y0, int x1, int y1)
{
    int dx = abs(x1 - x0);
    int dy = abs(y1 - y0);
    int sx = (x0 < x1) ? 1 : -1;
    int sy = (y0 < y1) ? 1 : -1;
    int err = dx - dy;

    while (true) {
        if (x0 < 0 || y0 < 0 || x0 >= var->move->width_x || y0 >= var->move->height_y)
            return;
        ft_put_pixel_color(var, x0, y0, 0xFFFFFF);
        if (x0 == x1 && y0 == y1)
            break;
        
        int e2 = 2 * err;
        if (e2 > -dy) {
            err -= dy;
            x0 += sx;
        }
        if (e2 < dx) {
            err += dx;
            y0 += sy;
        }
    }
}

int check_uniq_rays(t_start *var, double x, double y)
{
    int  map_x ;
    int  map_y ;
    if (!var || !var->move || !var->map)
        return -1;
    if (x + 1 < 0 || x + 1 >= var->move->width_x || y + 1 < 0 || y + 1 >= var->move->height_y)
        return -1;
    x++;
    map_x = (int)(x / TILE_SIZE);
    map_y = (int)(y / TILE_SIZE);
    if (var->map[map_y][map_x] == '1')
        return 0;
    y++;
    map_x = (int)(x / TILE_SIZE);
    map_y = (int)(y / TILE_SIZE);
    if (var->map[map_y][map_x] == '1')
        return 0;
    return 1;
}

int check_is_wall(t_start *var, double x, double y)
{
    if (!var || !var->move || !var->map)
        return -1;

    if (x < 0 || x >= var->move->width_x || y < 0 || y >= var->move->height_y)
        return -1;

    int map_x = (int)(x / TILE_SIZE);
    int map_y = (int)(y / TILE_SIZE);

    if (map_x < 0 || map_x >= var->move->width_x / TILE_SIZE || map_y < 0 || map_y >= var->move->height_y / TILE_SIZE)
        return -1;

    if (var->map[map_y][map_x] == '1')
        return 0;
    if (check_uniq_rays(var, x, y) == 0)
        return 0;
    return 1;
}

void	 git_first_x_intersection(t_start *var)
{
    t_intersection  inter;

	if(is_looking_up(var->ray->ray_angle))
		inter.first_intersection_y = floor(var->move->coor_y / TILE_SIZE) * TILE_SIZE - 1;
	else if(is_looking_down(var->ray->ray_angle))
		inter.first_intersection_y = floor(var->move->coor_y / TILE_SIZE) * TILE_SIZE + TILE_SIZE;
	
	inter.first_intersection_x = var->move->coor_x + (inter.first_intersection_y - var->move->coor_y) / ( tan(var->ray->ray_angle));
	inter.next_intersection_x = inter.first_intersection_x;
	inter.next_intersection_y = inter.first_intersection_y;

	if(is_looking_up(var->ray->ray_angle))
		inter.ya = -TILE_SIZE;
	else if(is_looking_down(var->ray->ray_angle))
		inter.ya = TILE_SIZE;
	
	inter.xa = inter.ya / tan(var->ray->ray_angle);
	while (check_is_wall(var, inter.next_intersection_x , inter.next_intersection_y) == 1)
	{
		inter.next_intersection_x += inter.xa;
		inter.next_intersection_y += inter.ya;
	}
	var->ray->x_inter_horizontal = inter.next_intersection_x;
	var->ray->y_inter_horizontal = inter.next_intersection_y;
}

void    git_first_y_intersection(t_start *var) 
{
    t_intersection  inter;

	if (is_looking_right(var->ray->ray_angle))
		inter.first_intersection_x = floor(var->move->coor_x / TILE_SIZE) * TILE_SIZE + TILE_SIZE;
	else if (is_looking_left(var->ray->ray_angle))
		inter.first_intersection_x = floor(var->move->coor_x / TILE_SIZE) * TILE_SIZE - 1;
	
	inter.first_intersection_y = var->move->coor_y + (inter.first_intersection_x - var->move->coor_x) * tan(var->ray->ray_angle);
	inter.next_intersection_x = inter.first_intersection_x;
	inter.next_intersection_y = inter.first_intersection_y;

	if (is_looking_right(var->ray->ray_angle))
		inter.xa = TILE_SIZE;
	else if (is_looking_left(var->ray->ray_angle))
		inter.xa = -TILE_SIZE;
	
	inter.ya = inter.xa * tan(var->ray->ray_angle);
	while (check_is_wall(var, inter.next_intersection_x , inter.next_intersection_y) == 1)
	{
		inter.next_intersection_x += inter.xa;
		inter.next_intersection_y += inter.ya;
	}
	var->ray->x_inter_vertical = inter.next_intersection_x;
	var->ray->y_inter_vaertical = inter.next_intersection_y;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   move_plyer.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bouhammo <bouhammo@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/15 19:31:31 by bouhammo          #+#    #+#             */
/*   Updated: 2024/12/24 17:18:46 by bouhammo         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../cub.h"

void ft_put_pixel_color(t_start *var, double x, double y , int color)
{
    if (x >= 0 && x < var->move->width_x && y >= 0 && y < var->move->height_y)
        mlx_put_pixel(var->img, x, y,   color);
}


int check_is_wall_1(t_start *var, double index_x , double index_y)
{
    if (index_x < 0 || index_x >= var->move->width_x || index_y < 0 || index_y >= var->move->height_y)
        return 0;

    int x_map = index_x;
    int y_map = index_y;

	int y = y_map;
	while (y  < y_map + var->offset  )
	{
		int x = x_map;
		while (x < x_map + var->offset  )
		{
            int map_x = (int)(x / TILE_SIZE);
            int map_y = (int)(y / TILE_SIZE);
            if (var->map[map_y][map_x] == '1')
                return 0;
			x++;
		}
		y++;
	}
    int map_x = (int)(index_x / TILE_SIZE);
    int map_y = (int)(index_y / TILE_SIZE);
    if (var->map[map_y][map_x] == '1')
        return 0;
    return 1;
}

void step_move(mlx_key_data_t keydata, t_start *var)
{
    double move_x = 0.0;
    double move_y = 0.0;

    if (keydata.key == MLX_KEY_A)
        move_y -= PLAYER_SPEED;
    else if (keydata.key == MLX_KEY_D)
        move_y += PLAYER_SPEED;
    if (keydata.key == MLX_KEY_S)
        move_x -= PLAYER_SPEED;
    else if (keydata.key == MLX_KEY_W)
        move_x += PLAYER_SPEED;

    double angle = var->draw->angle;
    double rotated_x = (move_x * cos(angle)) - (move_y * sin(angle));
    double rotated_y = (move_x * sin(angle)) + (move_y * cos(angle));

    if (check_is_wall_1(var, var->move->coor_x + rotated_x, var->move->coor_y + rotated_y) == 0 )//|| check_player_in_map(var, var->move->coor_x , var->move->coor_y))
        return;
    var->move->coor_x += rotated_x;
    var->move->coor_y += rotated_y;
}


void move_player(mlx_key_data_t keydata, t_start *var)
{
    step_move(keydata, var);

    mlx_delete_image(var->mlx, var->img);
    print_pixel(var);
    print_pixel_player(var);
    fix_rays(keydata, var);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   start_game.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bouhammo <bouhammo@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/13 16:38:12 by bouhammo          #+#    #+#             */
/*   Updated: 2025/01/05 18:47:53 by bouhammo         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../cub.h"



void change_deriction(mlx_key_data_t keydata, t_start *var)
{
    if (keydata.action == MLX_RELEASE || keydata.action == MLX_REPEAT)
    {
        if (keydata.key == MLX_KEY_RIGHT)
        {
            var->draw->angle += deg_to_rad(10);
			var->draw->angle  = normalize_angle(var->draw->angle);

			mlx_delete_image(var->mlx, var->img);
			print_pixel(var);
			print_pixel_player(var);
			ft_intersection(var);
		}
        else if (keydata.key == MLX_KEY_LEFT)
        {
            var->draw->angle -= deg_to_rad(10);
			var->draw->angle = normalize_angle(var->draw->angle);
	
			mlx_delete_image(var->mlx, var->img);
			print_pixel(var);
			print_pixel_player(var);
			ft_intersection(var);
        }
    }
}

void fix_rays(mlx_key_data_t keydata, t_start *var)
{
	(void)keydata;

	var->draw->angle  = normalize_angle(var->draw->angle);

	mlx_delete_image(var->mlx, var->img);
	print_pixel(var);
	print_pixel_player(var);
	ft_intersection(var);
}

void 	use_hook(mlx_key_data_t keydata, void* param)
{
	t_start 		*tmp_var;

	tmp_var = param;
	change_deriction(keydata, tmp_var);
	if(keydata.key == MLX_KEY_W && ( keydata.action == MLX_PRESS || keydata.action == MLX_REPEAT))
		move_player(keydata, tmp_var);

	if(keydata.key == MLX_KEY_S && ( keydata.action == MLX_PRESS || keydata.action == MLX_REPEAT))
		move_player(keydata, tmp_var);

	if(keydata.key == MLX_KEY_A && ( keydata.action == MLX_PRESS || keydata.action == MLX_REPEAT))
		move_player(keydata, tmp_var);

	if(keydata.key == MLX_KEY_D && ( keydata.action == MLX_PRESS || keydata.action == MLX_REPEAT))
		move_player(keydata, tmp_var);

	if(keydata.key == MLX_KEY_ESCAPE )
		exit(EXIT_SUCCESS);
}
void 	initialize_angle(t_start *var)
{
	double angle=0;
	if(var->player == 'N')
	{
		angle = 270;
		var->ray->ray_angle = deg_to_rad(angle - (rad_to_deg(FOV_ANGLE) / 2));
	}
	if(var->player == 'E')
	{
		angle = 90;
		var->ray->ray_angle = deg_to_rad(angle - (rad_to_deg(FOV_ANGLE) / 2));
	}
	if(var->player == 'S')
	{
		angle = 0;
		var->ray->ray_angle = deg_to_rad(angle - (rad_to_deg(FOV_ANGLE) / 2));
	}
	if(var->player == 'W')
	{
		angle = 180;
		var->ray->ray_angle = deg_to_rad(angle - (rad_to_deg(FOV_ANGLE) / 2));
	}
	var->draw->angle = deg_to_rad(angle);
	var->move->move_speed = var->draw->angle;
}
void	initialize_move_player(t_start *var )
{
	var->len_map = var->len_y * TILE_SIZE;

	var->move  = malloc(sizeof(t_move_player));
	var->draw  = malloc(sizeof(t_draw_line));
	var->ray   = malloc(sizeof(t_rays));
	var->inter = malloc(sizeof(t_position_intersec));
	var->wall  =  malloc((var->len_map + 1) * sizeof(build_walls_t));
    if (!var->move ||  !var->draw || !var->ray || !var->inter || !var->wall)
	{
        perror("Failed to allocate memory");
        exit(EXIT_FAILURE);
    }
	var->move->coor_x = var->p_y * TILE_SIZE;
	var->move->coor_y = var->p_x * TILE_SIZE;
	var->move->width_x = var->len_y * TILE_SIZE;
	var->move->height_y = var->len_x * TILE_SIZE;

initialize_angle(var);
	
}

void	ft_start_game(t_start *var)
{
	t_start 	*tmp;

	var->offset = 20;
	var->player =var->map[var->p_x][var->p_y];
	initialize_move_player(var);
	tmp = var;
	tmp->mlx = mlx_init( tmp->move->width_x, tmp->move->height_y ,"CUB3D", true);

	ft_game_is_over(tmp);
	mlx_key_hook(tmp->mlx, &use_hook, tmp);
	mlx_loop(tmp->mlx);
	mlx_terminate(tmp->mlx);
}
